package {{package}};

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.google.common.base.Optional;
import com.google.common.base.Suppliers;
import static com.google.common.base.Preconditions.checkNotNull;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableList;
import restx.common.Types;
import restx.common.TypeReference;
import restx.*;
import restx.entity.*;
import restx.http.*;
import restx.endpoint.*;
import restx.exceptions.WrappedCheckedException;
import restx.factory.*;
import restx.security.*;
import restx.security.PermissionFactory;
import restx.description.*;
import restx.converters.MainStringConverter;
import static restx.common.MorePreconditions.checkPresent;

import jakarta.validation.Validator;
import static restx.validation.Validations.checkValid;

import java.io.IOException;
import java.io.PrintWriter;

import java.util.Arrays;


@Component(priority = {{priority}})
{{condition}}
public class {{router}} extends RestxRouter {

    public {{router}}(
                    final {{resource}} resource,
                    final EntityRequestBodyReaderRegistry readerRegistry,
                    final EntityResponseWriterRegistry writerRegistry,
                    final MainStringConverter converter,
                    final PermissionFactory pf,
                    final Optional<Validator> validator,
                    final RestxSecurityManager securityManager,
                    final EndpointParameterMapperRegistry paramMapperRegistry) {
        super(
            "{{routerGroup}}", "{{router}}", new RestxRoute[] {
{{#routes}}
        new StdEntityRoute<{{inEntity}}, {{outEntity}}>("{{routeId}}",
                readerRegistry.<{{inEntity}}>build({{inEntityType}}, {{inContentType}}),
                writerRegistry.<{{outEntity}}>build({{outEntityType}}, {{outContentType}}),
                Endpoint.of("{{method}}", "{{path}}"),
                HttpStatus.{{successStatusName}}, RestxLogLevel.{{logLevelName}}, pf,
                paramMapperRegistry, new ParamDef[]{
{{queryParametersDefinition}}
                }) {
            @Override
            protected Optional<{{outEntity}}> doRoute(RestxRequest request, RestxResponse response, RestxRequestMatch match, {{inEntity}} body) throws IOException {
                {{securityCheck}}
                try {
                    {{call}}
                } catch(RuntimeException e) { throw e; }
                  {{#throwsIOException}}catch(IOException e) { throw e; }
                  {{/throwsIOException}}catch(Exception e) { throw new WrappedCheckedException(e); }
            }

            @Override
            protected void describeOperation(OperationDescription operation) {
                super.describeOperation(operation);
{{parametersDescription}}

                operation.responseClass = "{{responseClass}}";
                operation.inEntitySchemaKey = "{{inEntitySchemaKey}}";
                operation.inEntityType = {{inEntityType}};
                operation.outEntitySchemaKey = "{{outEntitySchemaKey}}";
                operation.outEntityType = {{outEntityType}};
                operation.sourceLocation = "{{sourceLocation}}";
                operation.annotations = ImmutableList.<java.lang.annotation.Annotation>builder()
{{#annotationDescriptions}}
                    .add(new {{annotationClass}}() {
                        public Class<{{annotationClass}}> annotationType() { return {{annotationClass}}.class; }
{{#annotationFields}}
                        public {{type}}{{#isArray}}[]{{/isArray}} {{name}}() { {{valueCodeInstanciation}}; }
{{/annotationFields}}
                    })
{{/annotationDescriptions}}
                    .build();
            }
        },
{{/routes}}
        });
    }

}
