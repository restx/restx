package {{package}};

import com.google.common.collect.ImmutableSet;
import restx.common.Types;
import restx.factory.*;
import {{componentFqcn}};

@Machine
public class {{machine}} extends SingleNameFactoryMachine<{{componentProducedType}}> {
    public static final Name<{{componentProducedType}}> NAME = Name.of({{componentProducedType}}.class, "{{componentInjectionName}}");

    public {{machine}}() {
        super({{priority}}, new StdMachineEngine<{{componentProducedType}}>(NAME, {{priority}}, BoundlessComponentBox.FACTORY) {
{{queriesDeclarations}}

            @Override
            public BillOfMaterials getBillOfMaterial() {
                return new BillOfMaterials(ImmutableSet.<Factory.Query<?>>of(
{{queries}}
                ));
            }

            @Override
            protected {{componentProducedType}} doNewComponent(SatisfiedBOM satisfiedBOM) {
                return new {{componentType}}(
{{parameters}}
                );
            }
        });
    }

}
