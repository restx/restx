package {{{package}}};

import com.google.common.collect.ImmutableSet;
import restx.factory.*;
import {{{moduleFqcn}}};


@Machine
public class {{{machine}}} extends DefaultFactoryMachine {
    private static final {{{moduleType}}} module = new {{{moduleType}}}();

    public {{{machine}}}() {
        super({{priority}}, new MachineEngine[] {
{{#engines}}
            new StdMachineEngine<{{{type}}}>(Name.of({{{type}}}.class, "{{{injectionName}}}"), BoundlessComponentBox.FACTORY) {
        {{{queriesDeclarations}}}
                @Override
                public BillOfMaterials getBillOfMaterial() {
                    return new BillOfMaterials(ImmutableSet.<Factory.Query<?>>of(
        {{{queries}}}
                    ));
                }

                @Override
                public {{{type}}} doNewComponent(SatisfiedBOM satisfiedBOM) {{#exceptions}} throws ProvisionException {{/exceptions}} {
	                {{#exceptions}}
                	try {
	                {{/exceptions}}
	                    return module.{{{name}}}(
	        {{{parameters}}}
	                    );
	                {{#exceptions}}
                    } catch ({{{exceptions}}} e) {
                    	throw new ProvisionException("Could not create component {{{name}}}", e);
                    }
	                {{/exceptions}}
                }
            },
{{/engines}}
        });
}
}
