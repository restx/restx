package {{package}};

import com.google.common.collect.ImmutableSet;

import restx.common.Types;
import restx.factory.*;
import {{moduleFqcn}};


@Machine
public class {{machine}} extends DefaultFactoryMachine {
    private static final {{moduleType}} module = new {{moduleType}}();

    public {{machine}}() {
        super({{priority}}, new MachineEngine[] {
{{#engines}}
            new StdMachineEngine<{{type}}>(
                    Name.<{{type}}>of(
                            {{typeFactory}},
                            "{{injectionName}}"
                    ),
                    {{enginePriority}},
                    BoundlessComponentBox.FACTORY) {

        {{queriesDeclarations}}
                @Override
                public BillOfMaterials getBillOfMaterial() {
                    return new BillOfMaterials(ImmutableSet.<Factory.Query<?>>of(
        {{queries}}
                    ));
                }

                @Override
                public {{type}} doNewComponent(SatisfiedBOM satisfiedBOM) {
	                {{#exceptions}}
                	try {
	                {{/exceptions}}
	                    return module.{{name}}(
	        {{parameters}}
	                    );
	                {{#exceptions}}
                    } catch ({{exceptions}} e) {
                    	throw new ProvisionException("Could not create component {{name}}", e);
                    }
	                {{/exceptions}}
                }
            },
{{/engines}}

{{#conditionalsEngines}}
            new StdMachineEngine<FactoryMachine>(
                    Name.of(FactoryMachine.class, "{{conditionalFactoryMachineName}}"), 0, BoundlessComponentBox.FACTORY) {
                private Factory.Query<String> query = Factory.Query.byName(Name.of(String.class, "{{whenName}}")).optional();

                @Override
                protected FactoryMachine doNewComponent(SatisfiedBOM satisfiedBOM) {
                    if (satisfiedBOM.getOne(query).isPresent()
                            && satisfiedBOM.getOne(query).get().getComponent().equals("{{whenValue}}")) {
                        return new SingleNameFactoryMachine<{{componentType}}>({{priority}},
                                        new StdMachineEngine<{{componentType}}>(
                                                Name.<{{componentType}}>of(
                                                        {{componentTypeFactory}},
                                                        "{{componentName}}"
                                                ),
                                                {{priority}},
                                                BoundlessComponentBox.FACTORY) {
                                            {{queriesDeclarations}}

                                            @Override
                                            public BillOfMaterials getBillOfMaterial() {
                                                return new BillOfMaterials(ImmutableSet.<Factory.Query<?>>of(
                                                    {{queries}}
                                                ));
                                            }

                                            @Override
                                            protected {{componentType}} doNewComponent(SatisfiedBOM satisfiedBOM) {
                                                {{#exceptions}}
                                                try {
                                                {{/exceptions}}
                                                    return module.{{methodName}}(
                                                {{parameters}}
                                                    );
                                                {{#exceptions}}
                                                } catch ({{exceptions}} e) {
                                                    throw new ProvisionException("Could not create component {{componentName}}", e);
                                                }
                                                {{/exceptions}}
                                            }
                                        });
                    } else {
                        return NoopFactoryMachine.INSTANCE;
                    }
                }

                @Override
                public BillOfMaterials getBillOfMaterial() {
                    return BillOfMaterials.of(query);
                }
            },
{{/conditionalsEngines}}
        });
    }
}
